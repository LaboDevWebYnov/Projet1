{
  "swagger": "2.0",
  "info": {
    "title": "Project 1 API",
    "description": "Send forward your gaming community using Project 1 API",
    "version": "1.0.0"
  },
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Security",
      "description": "login and permissions"
    },
    {
      "name": "User",
      "description": "account, friends, interests"
    },
    {
      "name": "Game",
      "description": "games"
    },
    {
      "name": "Player",
      "description": "player account, game properties"
    },
    {
      "name": "Address",
      "description": "addresses, user addresses"
    }
  ],
  "host": "localhost:3100",
  "basePath": "/api",
  "paths": {
    "/users": {
      "get": {
        "x-swagger-router-controller": "UserController",
        "operationId": "getUsers",
        "tags": [
          "User"
        ],
        "summary": "Get all users",
        "description": "Gets `User` objects.\nOptional query param of **size** determines\nsize of returned array\n",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Users",
            "schema": {
              "title": "ArrayOfUsers",
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/addUser": {
      "post": {
        "x-swagger-router-controller": "UserController",
        "operationId": "addUser",
        "tags": [
          "User"
        ],
        "summary": "Adds a new user",
        "description": "Adds new `User` object to the DB.",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User object to insert",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User has been successfully added to the DB"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}/getUserById": {
      "get": {
        "x-swagger-router-controller": "UserController",
        "operationId": "getUserById",
        "tags": [
          "User"
        ],
        "summary": "Get the specified user",
        "description": "Gets `User` object specified by its ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A 'User' object.",
            "schema": {
              "title": "Retrieved User object",
              "type": "object",
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{username}/getUserByUsername": {
      "get": {
        "x-swagger-router-controller": "UserController",
        "operationId": "getUserByUsername",
        "tags": [
          "User"
        ],
        "summary": "Gets the corresponding matching user",
        "description": "Gets `User` object specified by its username.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username of User to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A 'User' object.",
            "schema": {
              "title": "Retrieved User object",
              "type": "object",
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}/updateUser": {
      "put": {
        "x-swagger-router-controller": "UserController",
        "operationId": "updateUser",
        "tags": [
          "User"
        ],
        "summary": "Updates the corresponding user basic properties",
        "description": "Update `User` object specified by its ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "userObject",
            "in": "body",
            "description": "User object that will update the old one.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A 'User' object.",
            "schema": {
              "title": "Updated User object",
              "type": "object",
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}/updatePassword": {
      "put": {
        "x-swagger-router-controller": "UserController",
        "operationId": "updatePassword",
        "tags": [
          "User"
        ],
        "summary": "Updates the corresponding user password",
        "description": "Update password attr of `User` object specified by its ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "body",
            "description": "Object containing old password (to verify before updating) and new one to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A 'User' object.",
            "schema": {
              "title": "Updated User object",
              "type": "object",
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}/updateEmail": {
      "put": {
        "x-swagger-router-controller": "UserController",
        "operationId": "updateEmail",
        "tags": [
          "User"
        ],
        "summary": "Updates the corresponding user email",
        "description": "Update email attr of `User` object specified by its ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "body",
            "description": "New email to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A 'User' object.",
            "schema": {
              "title": "Updated User object",
              "type": "object",
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}/deleteUser": {
      "put": {
        "x-swagger-router-controller": "UserController",
        "operationId": "deleteUser",
        "tags": [
          "User"
        ],
        "summary": "Deactivates the corresponding user account",
        "description": "Deactivate `User` object specified by its ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to deactivate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A 'User' object.",
            "schema": {
              "title": "Deactivated User object",
              "type": "object",
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/addresses/getAddresses": {
      "get": {
        "x-swagger-router-controller": "AddressController",
        "operationId": "getAddresses",
        "tags": [
          "Address"
        ],
        "summary": "Get all addresses from DB",
        "description": "Gets all `Address` objects from DB.",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of 'Address' objects.",
            "schema": {
              "title": "ArrayOfAddresses",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/addresses/{userId}/getUserAddresses": {
      "get": {
        "x-swagger-router-controller": "UserAddressController",
        "operationId": "getUserAddresses",
        "tags": [
          "Address"
        ],
        "summary": "Get all addresses of the specified user from DB",
        "description": "Gets all `Address` objects of the specified User from DB.",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to search addresses for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of 'Address' objects.",
            "schema": {
              "title": "ArrayOfAddresses",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/addresses/{addressId}/getAddressById": {
      "get": {
        "x-swagger-router-controller": "UserAddressController",
        "operationId": "getAddressById",
        "tags": [
          "Address"
        ],
        "summary": "Get the corresponding `Address` object from DB",
        "description": "Gets the `Address` object specified byt its ID.",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "addressId of Address object to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An 'Address' object.",
            "schema": {
              "title": "Retrieved Address object",
              "type": "object",
              "$ref": "#/definitions/Address"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/addresses/{userId}/addAddress": {
      "post": {
        "x-swagger-router-controller": "UserAddressController",
        "operationId": "addAddress",
        "tags": [
          "Address"
        ],
        "summary": "Adds a new Address to the User",
        "description": "Adds new `Address` object to the `User` object to the DB.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "address",
            "in": "body",
            "description": "Address object to add to the User object",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User has been successfully added to the DB"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/addresses/{userId}/updateAddress/{addressId}": {
      "put": {
        "x-swagger-router-controller": "UserAddressController",
        "operationId": "updateAddress",
        "tags": [
          "Address"
        ],
        "summary": "Updates the corresponding user address",
        "description": "Update `User` object address specified by its ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of User object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "addressId of Address to add in User object addressList.",
            "required": true,
            "type": "string"
          },
          {
            "name": "address",
            "in": "body",
            "description": "Address object of User object to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A 'User' object.",
            "schema": {
              "title": "Updated User object",
              "type": "object",
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/addresses/{addressId}/deactivateAddress": {
      "put": {
        "x-swagger-router-controller": "UserAddressController",
        "operationId": "deactivateAddress",
        "tags": [
          "Address"
        ],
        "summary": "Deactivates the corresponding address",
        "description": "Deactivates `Address` object specified by its ID.",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "addressId of `Address` object to update.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A `Address` object.",
            "schema": {
              "title": "Deactivated `Address` object",
              "type": "object",
              "$ref": "#/definitions/Address"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/games": {
      "get": {
        "x-swagger-router-controller": "GameController",
        "operationId": "getGames",
        "tags": [
          "Game"
        ],
        "summary": "Gets all games",
        "description": "Gets `Game` objects.\nOptional query param of **size** determines\nsize of returned array\n",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Games",
            "schema": {
              "title": "ArrayOfGames",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Game"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/games/addGame": {
      "post": {
        "x-swagger-router-controller": "GameController",
        "operationId": "addGame",
        "tags": [
          "Game"
        ],
        "summary": "Adds a game",
        "description": "Adds new `Game` object to the DB.",
        "parameters": [
          {
            "name": "game",
            "in": "body",
            "description": "Game object to insert",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game has been successfully added to the DB"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/games/{gameId}/getGameById": {
      "get": {
        "x-swagger-router-controller": "GameController",
        "operationId": "getGameById",
        "tags": [
          "Game"
        ],
        "summary": "Get the specified game",
        "description": "Gets `Game` object specified by its ID.",
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "gameId of Game object to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A 'Game' object.",
            "schema": {
              "title": "Retrieved Game object",
              "type": "object",
              "$ref": "#/definitions/Game"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/games/{gameName}/getGameByName": {
      "get": {
        "x-swagger-router-controller": "GameController",
        "operationId": "getGameByName",
        "tags": [
          "Game"
        ],
        "summary": "Get the corresponding game based on the game name",
        "description": "Gets `Game` object specified by its name.",
        "parameters": [
          {
            "name": "gameName",
            "in": "path",
            "description": "Game's name to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A 'Game' object.",
            "schema": {
              "title": "Retrieved Game object",
              "type": "object",
              "$ref": "#/definitions/Game"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/games/{gameId}/updateGame": {
      "put": {
        "x-swagger-router-controller": "GameController",
        "operationId": "updateGame",
        "tags": [
          "Game"
        ],
        "summary": "Update the corresponding game",
        "description": "Update `Game` object specified by its ID.",
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "gameId of Game object to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameObject",
            "in": "body",
            "description": "Game object that will update the old one.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A 'Game' object.",
            "schema": {
              "title": "Updated Game object",
              "type": "object",
              "$ref": "#/definitions/Game"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/games/{gameId}/deleteGame": {
      "put": {
        "x-swagger-router-controller": "GameController",
        "operationId": "deleteGame",
        "tags": [
          "Game"
        ],
        "summary": "Deactivate the corresponding game",
        "description": "Deactivates the 'Game' object specified by its ID.",
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "gameId of Game object to deactivate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A 'Game' object.",
            "schema": {
              "title": "Updated Game object",
              "type": "object",
              "$ref": "#/definitions/Game"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/playerAccount": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountController",
        "operationId": "getPlayerAccountList",
        "tags": [
          "PlayerAccount"
        ],
        "description": "Gets `playerAccount` objects.\nOptional query param of **size** determines\nsize of returned array\n",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of PlayerAccount",
            "schema": {
              "title": "ArrayOfPlayerAccount",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerAccount"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/PlayerAccount/{userId}/addPlayerAccount/{gameId}": {
      "post": {
        "x-swagger-router-controller": "PlayerAccountController",
        "operationId": "addPlayerAccount",
        "tags": [
          "PlayerAccount"
        ],
        "summary": "Adds a new PlayerAccount",
        "description": "Adds new `PlayerAccount` object to the DB.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of player object to add.",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "path",
            "description": "gameId of player object to add.",
            "required": true,
            "type": "string"
          },
          {
            "name": "PlayerAccount",
            "in": "body",
            "description": "PlayerAccount object to insert",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlayerAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PlayerAccount has been successfully added to the DB"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/PlayerAccount/{playerAccountId}/getPlayerAccountById": {
      "get": {
        "x-swagger-router-controller": "PlayerAccountController",
        "operationId": "getPlayerAccountById",
        "tags": [
          "PlayerAccount"
        ],
        "description": "Gets `playerAcount` object specified by its ID.",
        "parameters": [
          {
            "name": "playerAccountId",
            "in": "path",
            "description": "playerAcountId of player object to search for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A 'playerAcount' object.",
            "schema": {
              "title": "Retrieved playerAcount object",
              "type": "object",
              "$ref": "#/definitions/PlayerAccount"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/players/{userId}/getPlayerByUserId": {
      "get": {
        "x-swagger-router-controller": "Players",
        "operationId": "getPlayerByUserId",
        "tags": [
          "/players"
        ],
        "description": "Gets `player` object specified by its UserId.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId of Player object to find.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Players",
            "schema": {
              "title": "ArrayOfPlayers",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerAccount"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/players/{login}/getPlayerByLogin": {
      "get": {
        "x-swagger-router-controller": "Players",
        "operationId": "getPlayerByLogin",
        "tags": [
          "/players"
        ],
        "description": "Gets `player` object specified by its login.",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "description": "login of Player object to find.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A 'player' object.",
            "schema": {
              "title": "Retrieved player object",
              "type": "object",
              "$ref": "#/definitions/PlayerAccount"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/players/{playerId}/deletePlayer": {
      "put": {
        "x-swagger-router-controller": "Players",
        "operationId": "deletePlayer",
        "tags": [
          "/players"
        ],
        "description": "Deactivates the 'player' object specified by its ID.",
        "parameters": [
          {
            "name": "playerId",
            "in": "path",
            "description": "playerId of Game object to deactivate.",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerObject",
            "in": "body",
            "description": "player object that will update the old one.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlayerAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A 'player' object.",
            "schema": {
              "title": "Updated player object",
              "type": "object",
              "$ref": "#/definitions/PlayerAccount"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "birthDate": {
          "type": "string",
          "format": "date"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "avatar": {
          "type": "string"
        },
        "address": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "phoneNumber": {
          "type": "string"
        },
        "admin": {
          "type": "boolean"
        },
        "friends": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "active": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "updated_at": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "PlayerAccount": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        },
        "login": {
          "type": "string"
        },
        "game": {
          "$ref": "#/definitions/Game"
        },
        "active": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "updated_at": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "postCode": {
          "type": "integer",
          "format": "int32"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "line": {
          "type": "string"
        }
      }
    },
    "Game": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "releaseDate": {
          "type": "string",
          "format": "date"
        },
        "multiPlayer": {
          "type": "boolean"
        },
        "editor": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "updated_at": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "ChangePassword": {
      "type": "object",
      "properties": {
        "oldPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        },
        "newPasswordConfirmation": {
          "type": "string"
        }
      }
    },
    "Email": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "string"
        }
      }
    }
  }
}